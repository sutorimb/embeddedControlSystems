                             #**************************************************************************/
                             #* FILE NAME: ctr0_VLE_Flash.s             COPYRIGHT (c) Freescale 2008   */
                             #*                                                All Rights Reserved     */
                             #* DESCRIPTION:                                                           */
                             #* This is a generic base template for init of a Flash Project            */
                             #=========================================================================*/
                             #*                                                                        */
                             #*========================================================================*/
                             #**************************************************************************/
                             ##------- BEFORE USING ------------------------------------------------------   
                             # Ensure in the linker file that the correct SRAM size is selected
                             ##---------------------------------------------------------------------------
                                                .extern      main             
                                                .extern      romcopy          
                             # CW requires that these be externel
                                                .extern      __SP_INIT        
                                                .extern      _SDA_BASE_       
                                                .extern      __DATA_ROM_ADDR  
                                                .extern      __DATA_SRAM_ADDR 
                                                .extern      __DATA_SIZE      
                                                .extern      __SDATA_ROM_ADDR 
                                                .extern      __SDATA_SRAM_ADDR 
                                                .extern      __SDATA_SIZE     
                                                .extern      _SDA2_BASE_      
                                                .extern      _SRAM_BASE_ADDR  
                                                .extern      _SRAM_SIZE       
                                                .extern      __BSS_START      
                                                .extern      __BSS_SIZE       

                             ##---------------------------------------------------------------------------
                             ## Reset Configuration Half Word
                             ##---------------------------------------------------------------------------
                                                .section     .rcw             

                                                                              #.LONG 0x005A005A         # MPC5643 - Leopard - VLE OFF, Valid Bood Identifier 0x5A    
0x00000000: 015a015a                            .long        0x015A015A       # MPC5643 - Leopard - VLE ON, Valid Bood Identifier 0x5A
                                                                              #.LONG 0x015A015A        # MPC55xx - e200 Core Watchdog OFF, External Boot OFF, VLE ON
                                                                              #.LONG 0x055A0000        # MPC55xx - e200 Core Watchdog ON,  External Boot OFF, VLE ON
                                                                              #.LONG 0x095A0000        # Monaco/Mamba - Software Watchdog ON,       e200 Core Watchdog OFF, External Boot OFF, VLE ON
                                                                              #.LONG 0x015A0000        # Monaco/Mamba - Software Watchdog DISABLED, e200 Core Watchdog OFF, External Boot OFF, VLE ON
                                                                              #.LONG 0x055A0000        # Fado - Software Watchdog ON,  VLE ON
                                                                              #.LONG 0x015A0000        # Fado - Software Watchdog OFF, VLE ON
                                                                              #.LONG 0x005A0000        # Bolero/Pictus/Spectrum

0x00000004: 00000000                            .long        _start           # Code starts at _start
0x40000000:                  _BIUCR_RAM_ADDR    .equ         0x40000000       
                             ##---------------------------------------------------------------------------
                             ## Program Entry
                             ##---------------------------------------------------------------------------       
                             # CW Requires it this way, though it appears to work for GHS also
                             # This is what it was originally.section    ".text", "vax"        
                                                .globl       _start           
                             # This needs to be here to work for both CW & GHS dues to the GHS Linker file (which could be changed...)
                             ##---------------------------------------------------------------------------
                             ## Initialise GPR's for LockStep Mode 
                             ## This REALLY IS A MUST!
                             ## This is the version given to me by Gene Fortunately in Austin
                             ##---------------------------------------------------------------------------
                             # Set the MSR[SPE] bit so code can use "evmergelo" instruction.
0x02000000:                  MSR_Mask           .equ         0x02000000       


                                                .section     .text_vle,text_vle ; The "text" generates symbols for debug

                             _start                                           
0x00000000: 70a00000                            e_li         r5, 0            
0x00000004: 7ca000a6                            mfmsr        r5               
0x00000008: 70c0e200                            e_lis        r6, MSR_Mask@h   
0x0000000c: 70c0c000                            e_or2i       r6, MSR_Mask@l   
0x00000010: 4465                                se_or        r5,r6            
0x00000012: 7ca00124                            mtmsr        r5               
0x00000016: 0001                                se_isync                      
                             ;# 1.  32 64-bit GPR0-31
0x00000018: 7020e000                            e_lis        r1, 0            ;# Initialize the lower 32-bits of GPR1 to 0

0x0000001c: 10010a2d                            evmergelo    r0,r1,r1         # Initialize the 64-bits of GPR0 to 0
0x00000020: 1020022d                            evmergelo    r1,r0,r0         # Continue initializing the other 64-bit GPRs
0x00000024: 1040022d                            evmergelo    r2,r0,r0         # ...
0x00000028: 1060022d                            evmergelo    r3,r0,r0         #
0x0000002c: 1080022d                            evmergelo    r4,r0,r0         #
0x00000030: 10a0022d                            evmergelo    r5,r0,r0         #
0x00000034: 10c0022d                            evmergelo    r6,r0,r0         #
0x00000038: 10e0022d                            evmergelo    r7,r0,r0         #
0x0000003c: 1100022d                            evmergelo    r8,r0,r0         #
0x00000040: 1120022d                            evmergelo    r9,r0,r0         #
0x00000044: 1140022d                            evmergelo    r10,r0,r0        #
0x00000048: 1160022d                            evmergelo    r11,r0,r0        #
0x0000004c: 1180022d                            evmergelo    r12,r0,r0        #
0x00000050: 11a0022d                            evmergelo    r13,r0,r0        #
0x00000054: 11c0022d                            evmergelo    r14,r0,r0        #
0x00000058: 11e0022d                            evmergelo    r15,r0,r0        #
0x0000005c: 1200022d                            evmergelo    r16,r0,r0        #
0x00000060: 1220022d                            evmergelo    r17,r0,r0        #
0x00000064: 1240022d                            evmergelo    r18,r0,r0        #
0x00000068: 1260022d                            evmergelo    r19,r0,r0        #
0x0000006c: 1280022d                            evmergelo    r20,r0,r0        #
0x00000070: 12a0022d                            evmergelo    r21,r0,r0        #
0x00000074: 12c0022d                            evmergelo    r22,r0,r0        #
0x00000078: 12e0022d                            evmergelo    r23,r0,r0        #
0x0000007c: 1300022d                            evmergelo    r24,r0,r0        #
0x00000080: 1320022d                            evmergelo    r25,r0,r0        #
0x00000084: 1340022d                            evmergelo    r26,r0,r0        #
0x00000088: 1360022d                            evmergelo    r27,r0,r0        #
0x0000008c: 1380022d                            evmergelo    r28,r0,r0        #
0x00000090: 13a0022d                            evmergelo    r29,r0,r0        #
0x00000094: 13c0022d                            evmergelo    r30,r0,r0        #
0x00000098: 13e0022d                            evmergelo    r31,r0,r0        # Initialize the 64-bit GPR31 to 0
                             # 2.  32-bit DEAR (spr 61)
                             # mtspr 61,r31         #DEAR
                             # 3.  32-bit SPRG0-9 (spr 272-279, 604 & 605)
0x0000009c: 7ff043a6                            mtspr        272,r31          #SPRG0-7
0x000000a0: 7ff143a6                            mtspr        273,r31          
0x000000a4: 7ff243a6                            mtspr        274,r31          
0x000000a8: 7ff343a6                            mtspr        275,r31          
0x000000ac: 7ff443a6                            mtspr        276,r31          
0x000000b0: 7ff543a6                            mtspr        277,r31          
0x000000b4: 7ff643a6                            mtspr        278,r31          
0x000000b8: 7ff743a6                            mtspr        279,r31          

0x000000bc: 7ffc93a6                            mtspr        604,r31          #SPRG8-9
0x000000c0: 7ffd93a6                            mtspr        605,r31          
                             # 4.  32-bit USPRG0 (spr 256)
0x000000c4: 7fe043a6                            mtspr        256,r31          #USPRG0
                             # 5.  32-bit SRR0 (spr 26), SRR1 (spr 27), CSRR0 (spr58), CSRR1 (spr59),
                             #    DSRR0 (spr 574), DSRR1 (spr 575), MCSRR0 (spr570), MCSRR1 (spr571)
0x000000c8: 7ffa03a6                            mtspr        26,r31           #SRR0-1
0x000000cc: 7ffb03a6                            mtspr        27,r31           
0x000000d0: 7ffa0ba6                            mtspr        58,r31           #CSRR0-1
0x000000d4: 7ffb0ba6                            mtspr        59,r31           
0x000000d8: 7ffa8ba6                            mtspr        570,r31          #MCSRR0-1
0x000000dc: 7ffb8ba6                            mtspr        571,r31          
0x000000e0: 7ffe8ba6                            mtspr        574,r31          #DSSRR0-1
0x000000e4: 7fff8ba6                            mtspr        575,r31          

                             # 6.  32-bit IVPR (spr 63)
0x000000e8: 7fff0ba6                            mtspr        63,r31           #IVPR
0x000000ec: 7ffe0ba6                            mtspr        62,r31           #ESR
0x000000f0: 7ff453a6                            mtspr        340,r31          #TCR
0x000000f4: 7fe083a6                            mtspr        512,r31          #SPEFSCR
0x000000f8: 7fe103a6                            mtspr        1,r31            #XER
0x000000fc: 7fe043a6                            mtspr        256,r31          #USPRG0

                             # 7.  32-bit IVOR0-15 (spr 400 - 415), IVOR 32-35 (spr 528 - 531)
0x00000100: 7ff063a6                            mtspr        400,r31          #IVOR0-15
0x00000104: 7ff163a6                            mtspr        401,r31          
0x00000108: 7ff263a6                            mtspr        402,r31          
0x0000010c: 7ff363a6                            mtspr        403,r31          
0x00000110: 7ff463a6                            mtspr        404,r31          
0x00000114: 7ff563a6                            mtspr        405,r31          
0x00000118: 7ff663a6                            mtspr        406,r31          
0x0000011c: 7ff763a6                            mtspr        407,r31          
0x00000120: 7ff863a6                            mtspr        408,r31          
0x00000124: 7ff963a6                            mtspr        409,r31          
0x00000128: 7ffa63a6                            mtspr        410,r31          
0x0000012c: 7ffb63a6                            mtspr        411,r31          
0x00000130: 7ffc63a6                            mtspr        412,r31          
0x00000134: 7ffd63a6                            mtspr        413,r31          
0x00000138: 7ffe63a6                            mtspr        414,r31          
0x0000013c: 7fff63a6                            mtspr        415,r31          
0x00000140: 7ff083a6                            mtspr        528,r31          #IVOR32-35
0x00000144: 7ff183a6                            mtspr        529,r31          
0x00000148: 7ff283a6                            mtspr        530,r31          

                             # Executing this instruction crashes the part. August 11, 2010
                             # mtspr 531,r31         # does IVOR 35 exist? Not in e200z4 RM ?
                             # 8.  32-bit MCAR (spr 573)
0x0000014c: 7ffd8ba6                            mtspr        573,r31          #MCAR

                             # 9. 32-bit TBL, TBU (spr 284, 285)
0x00000150: 7ffc43a6                            mtspr        284,r31          #TBL
0x00000154: 7ffd43a6                            mtspr        285,r31          #TBU

                             # 10. 32-bit DEC, DECAR (spr 22, 54)
0x00000158: 7ff603a6                            mtspr        22,r31           #DEC
0x0000015c: 7ff60ba6                            mtspr        54,r31           #DECAR
                             # 11. 64-bit DVC1, DVC2 (spr 318, 319)
                             # Note most debug registers are reset by POR so initialization is not required.
0x00000160: 7ffe4ba6                            mtspr        318,r31          #DVC1
0x00000164: 7fff4ba6                            mtspr        319,r31          #DVC2
                             # 12. 32-bit DBCNT (spr 562)
0x00000168: 7ff28ba6                            mtspr        562,r31          #DBCNT
                             # 16. SPE ACC register. 

0x0000016c: 103f04c4                            evmra        r1,r31           # Initialize the 64-bit SPE ACC to 0
0x00000170: 103f04c4                            evmra        r1,r31           # It was required to use the "evmra" command twice in
                                                                              # simulation. Verify on silicon ??????                
                             # 17. Condition Registers  

0x00000174: 7feff120                            mtcrf        0xFF,r31         

                             # 18. Counter/Decrementer/Link Register
0x00000178: 7fe903a6                            mtspr        9,r31            #CTR
0x0000017c: 7fe803a6                            mtspr        8,r31            #LR
                             ;##---------------------------------------------------------------------------
                             ;## MMU Setup
                             ;##---------------------------------------------------------------------------
                             ;
                             ;
                             ;
0x00000180: 7142e000                            e_lis        r10, 0x1000      
0x00000184: 7140c000                            e_or2i       r10, 0x0000      
0x00000188: 7d509ba6                            mtspr        624, r10         
                             ;            
                             ;            
                             ;            
                             ;            
0x0000018c: 7178e000                            e_lis        r11, 0xC000      
0x00000190: 7160c500                            e_or2i       r11, 0x0500      
0x00000194: 7d719ba6                            mtspr        625, r11         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000198: 7180e000                            e_lis        r12, 0x0000      
0x0000019c: 7180c020                            e_or2i       r12, 0x0020      
0x000001a0: 7d929ba6                            mtspr        626, r12         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x000001a4: 7120e000                            e_lis        r9, 0x0000       
0x000001a8: 7120c03f                            e_or2i       r9, 0x003F       
0x000001ac: 7d339ba6                            mtspr        627, r9          
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x000001b0: 7c0004ac                            msync                         
0x000001b4: 7c0007a4                            tlbwe                         
                                                                              ;    
0x000001b8: 0001                                se_isync                      

                             ;
                             ;
                             ;
0x000001ba: 7142e002                            e_lis        r10, 0x1002      
0x000001be: 7140c000                            e_or2i       r10, 0x0000      
0x000001c2: 7d509ba6                            mtspr        624, r10         
                             ;            
                             ;            
                             ;            
                             ;            
0x000001c6: 7178e000                            e_lis        r11, 0xC000      
0x000001ca: 7160c300                            e_or2i       r11, 0x0300      
0x000001ce: 7d719ba6                            mtspr        625, r11         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x000001d2: 7188e000                            e_lis        r12, 0x4000      
0x000001d6: 7180c028                            e_or2i       r12, 0x0028      
0x000001da: 7d929ba6                            mtspr        626, r12         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x000001de: 7128e000                            e_lis        r9, 0x4000       
0x000001e2: 7120c03f                            e_or2i       r9, 0x003F       
0x000001e6: 7d339ba6                            mtspr        627, r9          
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x000001ea: 7c0004ac                            msync                         
0x000001ee: 7c0007a4                            tlbwe                         
                                                                              ;    
0x000001f2: 0001                                se_isync                      

                             ;
                             ;
                             ;
0x000001f4: 7142e003                            e_lis        r10, 0x1003      
0x000001f8: 7140c000                            e_or2i       r10, 0x0000      
0x000001fc: 7d509ba6                            mtspr        624, r10         
                             ;            
                             ;            
                             ;            
                             ;            
0x00000200: 7178e000                            e_lis        r11, 0xC000      
0x00000204: 7161c200                            e_or2i       r11, 0x0A00      
0x00000208: 7d719ba6                            mtspr        625, r11         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x0000020c: 7190e000                            e_lis        r12, 0x8000      
0x00000210: 7180c008                            e_or2i       r12, 0x0008      
0x00000214: 7d929ba6                            mtspr        626, r12         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000218: 7130e000                            e_lis        r9, 0x8000       
0x0000021c: 7120c03f                            e_or2i       r9, 0x003F       
0x00000220: 7d339ba6                            mtspr        627, r9          
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000224: 7c0004ac                            msync                         
0x00000228: 7c0007a4                            tlbwe                         
                                                                              ;    
0x0000022c: 0001                                se_isync                      
                             ;
                             ;
                             ;
0x0000022e: 7142e004                            e_lis        r10, 0x1004      
0x00000232: 7140c000                            e_or2i       r10, 0x0000      
0x00000236: 7d509ba6                            mtspr        624, r10         
                             ;            
                             ;            
                             ;            
                             ;            
0x0000023a: 7178e000                            e_lis        r11, 0xC000      
0x0000023e: 7160c500                            e_or2i       r11, 0x0500      
0x00000242: 7d719ba6                            mtspr        625, r11         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000246: 7198e3f0                            e_lis        r12, 0xC3F0      
0x0000024a: 7180c008                            e_or2i       r12, 0x0008      
0x0000024e: 7d929ba6                            mtspr        626, r12         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000252: 7138e3f0                            e_lis        r9, 0xC3F0       
0x00000256: 7120c03f                            e_or2i       r9, 0x003F       
0x0000025a: 7d339ba6                            mtspr        627, r9          
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x0000025e: 7c0004ac                            msync                         
0x00000262: 7c0007a4                            tlbwe                         
                                                                              ;    
0x00000266: 0001                                se_isync                      
                             ;
                             ;
                             ;
0x00000268: 7142e005                            e_lis        r10, 0x1005      
0x0000026c: 7140c000                            e_or2i       r10, 0x0000      
0x00000270: 7d509ba6                            mtspr        624, r10         
                             ;            
                             ;            
                             ;            
                             ;            
0x00000274: 7178e000                            e_lis        r11, 0xC000      
0x00000278: 7160c580                            e_or2i       r11, 0x0580      
0x0000027c: 7d719ba6                            mtspr        625, r11         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000280: 719fe7e0                            e_lis        r12, 0xFFE0      
0x00000284: 7180c028                            e_or2i       r12, 0x0028      
0x00000288: 7d929ba6                            mtspr        626, r12         
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x0000028c: 713fe7e0                            e_lis        r9, 0xFFE0       
0x00000290: 7120c03f                            e_or2i       r9, 0x003F       
0x00000294: 7d339ba6                            mtspr        627, r9          
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
                             ;            
0x00000298: 7c0004ac                            msync                         
0x0000029c: 7c0007a4                            tlbwe                         
                                                                              ;    
0x000002a0: 0001                                se_isync                      

                             ##---------------------------------------------------------------------------
                             ## Initialise SRAM ECC
                             ##---------------------------------------------------------------------------
                             RAMINIT                                          
0x000002a2: 70a0e000                            e_lis        r5, _SRAM_BASE_ADDR@h 
0x000002a6: 70a0c000                            e_or2i       r5, _SRAM_BASE_ADDR@l 

                             # Store number of 128Byte (32GPRs) segments in Counter
0x000002aa: 70c0e000                            e_lis        r6, _SRAM_SIZE@h # Initialize r6 to size of SRAM (Bytes)
0x000002ae: 70c0c000                            e_or2i       r6,  _SRAM_SIZE@l # this is 64K in dual core mode

0x000002b2: 7cc61c70                            e_srwi       r6, r6, 0x3      # Divide SRAM size by 8 (half SRAM size in words)
0x000002b6: 7cc903a6                            mtctr        r6               # Move to counter for use with "bdnz"

                             # Fill SRAM with known values not registers 
                             # Never write content of uninitialised registers to SRAM 
                             sram_loop1                                       
0x000002ba: 7000e000                            e_lis        r0,0x0           
0x000002be: 54050000                            e_stw        r0,0x0(r5)       # Write all 32 registers to SRAM
0x000002c2: 18a58004                            e_addi       r5,r5,4          # Increment the RAM pointer to next 128byte
0x000002c6: 7a20fff4                            e_bdnz       sram_loop1       # Loop for all of SRAM
                             # Finish initializing SRAM
0x000002ca: 7cc903a6                            mtctr        r6               # r6 still contains half the SRAM size in words
                             sram_loop2                                       
0x000002ce: 7000e000                            e_lis        r0,0x0           
0x000002d2: 18050600                            e_stwu       r0,0x0(r5)       # Write all 32 registers to SRAM
0x000002d6: 18a58004                            e_addi       r5,r5,4          # Increment the RAM pointer to next 128byte
0x000002da: 7a20fff4                            e_bdnz       sram_loop2       # Loop for all of SRAM

                             ##--------- Initialize BSS section ------------------------------------------
                             bss_Init                                         
0x000002de: 7120e000                            e_lis        r9, __BSS_SIZE@h # Load upper BSS load size (# of bytes) into R9
0x000002e2: 7120c000                            e_or2i       r9, __BSS_SIZE@l # Load lower BSS load size into R9 and compare to zero
0x000002e6: 70099800                            e_cmp16i     r9,0             
0x000002ea: 7a120020                            e_beq        bss_Init_end     # Exit if size is zero (no data to initialise)
0x000002ee: 7d2903a6                            mtctr        r9               # Store no. of bytes to be moved in counter
0x000002f2: 70a0e000                            e_lis        r5, __BSS_START@h # Load upper BSS address into R5 (from linker file)
0x000002f6: 70a0c000                            e_or2i       r5,  __BSS_START@l # Load lower BSS address into R5 (from linker file)
0x000002fa: 18a584ff                            e_subi       r5, r5, 1        # Decrement address to prepare for bss_Init_loop
0x000002fe: 7080e000                            e_lis        r4, 0x0          
                             bss_Init_loop                                    
0x00000302: 18850401                            e_stbu       r4, 1(r5)        # Store zero byte into BSS at R5 and update BSS address
0x00000306: 7a20fffc                            e_bdnz       bss_Init_loop    # Branch if more bytes to load

                             bss_Init_end                                     
                             ##---------------------------------------------------------------------------       
                             ## Initialised Data - ".data"
                             ##---------------------------------------------------------------------------       
                             DATACOPY                                         
0x0000030a: 7120e000                            e_lis        r9, __DATA_SIZE@h # Load upper SRAM load size (# of bytes) into R9
0x0000030e: 7120c000                            e_or2i       r9, __DATA_SIZE@l # Load lower SRAM load size into R9 and compare to zero
0x00000312: 70099800                            e_cmp16i     r9,0             
0x00000316: 7a12002c                            e_beq        SDATACOPY        # Exit cfg_ROMCPY if size is zero (no data to initialise)
0x0000031a: 7d2903a6                            mtctr        r9               # Store no. of bytes to be moved in counter
0x0000031e: 7140e000                            e_lis        r10, __DATA_ROM_ADDR@h # Load address of first SRAM load into R10
0x00000322: 7140c000                            e_or2i       r10,  __DATA_ROM_ADDR@l # Load lower address of SRAM load into R10
0x00000326: 194a84ff                            e_subi       r10,r10, 1       # Decrement address to prepare for ROMCPYLOOP
0x0000032a: 70a0e000                            e_lis        r5, __DATA_SRAM_ADDR@h # Load upper SRAM address into R5 (from linker file)
0x0000032e: 70a0c000                            e_or2i       r5,  __DATA_SRAM_ADDR@l # Load lower SRAM address into R5 (from linker file)
0x00000332: 18a584ff                            e_subi       r5, r5, 1        # Decrement address to prepare for ROMCPYLOOP
                             DATACPYLOOP                                      
0x00000336: 188a0001                            e_lbzu       r4, 1(r10)       # Load data byte at R10 into R4,incrementing (update) ROM address
0x0000033a: 18850401                            e_stbu       r4, 1(r5)        # Store R4 data byte into SRAM at R5 and update SRAM address
0x0000033e: 7a20fff8                            e_bdnz       DATACPYLOOP      # Branch if more bytes to load from ROM
                             ##---------------------------------------------------------------------------       
                             ## Small Initialised Data - ".sdata"
                             ##---------------------------------------------------------------------------       
                             SDATACOPY                                        

0x00000342: 7120e000                            e_lis        r9, __SDATA_SIZE@h # Load upper SRAM load size (# of bytes) into R9
0x00000346: 7120c000                            e_or2i       r9,  __SDATA_SIZE@l # Load lower SRAM load size into R9 and compare to zero
0x0000034a: 70099800                            e_cmp16i     r9,0             
0x0000034e: 7a12002c                            e_beq        ROMCPYEND        # Exit cfg_ROMCPY if size is zero (no data to initialise)
0x00000352: 7d2903a6                            mtctr        r9               # Store no. of bytes to be moved in counter
0x00000356: 7140e000                            e_lis        r10, __SDATA_ROM_ADDR@h # Load address of first SRAM load into R10
0x0000035a: 7140c000                            e_or2i       r10,  __DATA_ROM_ADDR@l # Load lower address of SRAM load into R10
0x0000035e: 194a84ff                            e_subi       r10,r10, 1       # Decrement address to prepare for ROMCPYLOOP
0x00000362: 70a0e000                            e_lis        r5, __SDATA_SRAM_ADDR@h # Load upper SRAM address into R5 (from linker file)
0x00000366: 70a0c000                            e_or2i       r5, __SDATA_SRAM_ADDR@l # Load lower SRAM address into R5 (from linker file)
0x0000036a: 18a584ff                            e_subi       r5, r5, 1        # Decrement address to prepare for ROMCPYLOOP
                             SDATACPYLOOP                                     
0x0000036e: 188a0001                            e_lbzu       r4, 1(r10)       # Load data byte at R10 into R4,incrementing (update) ROM address
0x00000372: 18850401                            e_stbu       r4, 1(r5)        # Store R4 data byte into SRAM at R5 and update SRAM address
0x00000376: 7a20fff8                            e_bdnz       SDATACPYLOOP     # Branch if more bytes to load from ROM
                             ROMCPYEND                                        
                             ##---------------------------------------------------------------------------       
                             ## Setup the Stack
                             ##---------------------------------------------------------------------------       
                             SETUPSTACK                                       
0x0000037a: 7020e000                            e_lis        r1, __SP_INIT@h  # Initialize stack pointer r1 to
0x0000037e: 7020c000                            e_or2i       r1,  __SP_INIT@l # value in linker command file.

0x00000382: 71a0e000                            e_lis        r13, _SDA_BASE_@h # Initialize r13 to sdata base
0x00000386: 71a0c000                            e_or2i       r13,  _SDA_BASE_@l # (provided by linker).
0x0000038a: 7040e000                            e_lis        r2, _SDA2_BASE_@h # Initialize r2 to sdata2 base
0x0000038e: 7040c000                            e_or2i       r2,  _SDA2_BASE_@l # (provided by linker).
0x00000392: 18008000                            e_addi       r0, r0, 0        
0x00000396: 18010680                            e_stwu       r0,-128(r1)      # Terminate stack.  This seems to be required for main()
                             ##---------------------------------------------------------------------------       
                             ## Main Code - May Need Optimizations Here (Flash, Cache, etc)
                             ##---------------------------------------------------------------------------       
                             #--------------------------------------------#
                             # Load Flash BIUCR Setting into R7           #
                             ##############################################
                             ## CHANGE FOR DIFFERENT FSYS:               ##
                             ##  Up to 147MHz : 0x00538CFD               ##
                             ##  Up to 135MHz : 0x00534BFD               ##
                             ##  Up to 102MHz : 0x00532AFD               ##
                             ##  Up to 82MHz  : 0x005329FD               ##
                             ##
                             ##  Leopard PFCR0 & 1 are a differnt format ##
                             ##  3 WS needed for 120MHZ                  ##
                             ##  3 Read, 3 Write, 3 Pipeline             ##
                             ##  All Prefetch and Buffers Enabled        ## 
                             ##  PFCR0 = 0x18C7FDFD                      ##
                             ##############################################
                             #--------------------------------------------#
0x0000039a: 70e3e0c7                            e_lis        r7, 0x18C7       
0x0000039e: 70ffc5fd                            e_or2i       r7, 0xFDFD       
                             #--------------------------------------------#
                             # Load Flash BIUCR Address into R6           #
                             #--------------------------------------------#
0x000003a2: 70d8e3f8                            e_lis        r6, 0xC3F8       
0x000003a6: 70d0c01c                            e_or2i       r6, 0x801C       

                             SRAMLOAD                                         
                             #--------------------------------------------#
                             # Load BIUCR write instruction into R8, R9 & #
                             #--------------------------------------------#
0x000003aa: 7112e0e6                            e_lis        r8, 0x90E6       
0x000003ae: 7100c000                            e_or2i       r8,  0x0000      # R8 = "stw r7, 0x0(r6)"
0x000003b2: 7129e400                            e_lis        r9, 0x4C00       
0x000003b6: 7120c12c                            e_or2i       r9,  0x012C      # R9 = "isync" added 02 December 2009
0x000003ba: 7149e680                            e_lis        r10, 0x4E80      
0x000003be: 7140c020                            e_or2i       r10,  0x0020     # R10 = "blr"

                             #--------------------------------------------#
                             # Load RAM address into R11                  #
                             #--------------------------------------------#
0x000003c2: 7168e000                            e_lis        r11, _BIUCR_RAM_ADDR@h 
0x000003c6: 196b8000                            e_addi       r11,r11, _BIUCR_RAM_ADDR@l 

                             #--------------------------------------------#
                             # Store Instructions in RAM, then branch and #
                             # execute instructions to setup BIUCR        #
                             #--------------------------------------------#
0x000003ca: 550b0000                            e_stw        r8, 0x0(r11)     ;
0x000003ce: 552b0004                            e_stw        r9, 0x4(r11)     ;
0x000003d2: 554b0008                            e_stw        r10, 0x8(r11)    ;
                             #--------------------------------------------#
                             # Load SRAM Wait State Setting into R3       #
                             ##############################################
                             ## CHANGE FOR DIFFERENT FSYS:               ##
                             ##  >=100MHz   : 0x40000000                 ##
                             ##  <100MHz    : 0x00000000                 ##
                             ##############################################
                             #--------------------------------------------#
0x000003d6: 7068e000                            e_lis        r3, 0x4000       
0x000003da: 7060c000                            e_or2i       r3, 0x0000       
                             #--------------------------------------------#
                             # Load SRAM Wait State Register Address into #
                             # R4 and perform write                       #
                             #--------------------------------------------#
0x000003de: 709fe7f4                            e_lis        r4, 0xFFF4       
0x000003e2: 7080c024                            e_or2i       r4, 0x0024       
0x000003e6: 54640000                            e_stw        r3, 0x0(r4)      
                             cfg_ICACHE                                       
                                                                              #--------------------------------------------#
                                                                              # Invalidate Instruction Cache - Set ICINV   #
                                                                              # bit in L1CSR1 Register                     #
                                                                              #--------------------------------------------#
0x000003ea: 70a0e000                            e_lis        r5, 0x0000       
0x000003ee: 70a0c002                            e_or2i       r5, 0x0002       
0x000003f2: 7cb3fba6                            mtspr        l1csr1,r5        
                                                                              #--------------------------------------------#
                                                                              # Mask out ICINV and ICABT to see if         #
                                                                              # invalidation is complete (i.e. ICINV=0,    #
                                                                              # ICABT=0)                                   #
                                                                              #--------------------------------------------#
                             label_ICINV_check                                
                                                                              #--------------------------------------------#
                                                                              # Load Registers with Masks:                 #
                                                                              # Load ICINV mask into R8                    #
                                                                              # Load ICABT mask into R7                    #
                                                                              # Load ICABT clear mask into R11             #
                                                                              #--------------------------------------------#
0x000003f6: 7100e000                            e_lis        r8, 0x0000       
0x000003fa: 7100c002                            e_or2i       r8,  0x0002      
0x000003fe: 70e0e000                            e_lis        r7, 0x0000       
0x00000402: 70e0c004                            e_or2i       r7,  0x0004      
0x00000406: 717fe7ff                            e_lis        r11, 0xFFFF      
0x0000040a: 717fc7fb                            e_or2i       r11,  0xFFFB     
                             CHECK_ICINV                                      
                                                                              #--------------------------------------------#
                                                                              # Read L1CSR1 register, store in r9          #
                                                                              #--------------------------------------------#
0x0000040e: 7d33faa6                            mfspr        r9, l1csr1       
                                                                              #--------------------------------------------#
                                                                              # check for an ABORT of the cache invalidate #
                                                                              # operation                                  #
                                                                              #--------------------------------------------#
0x00000412: 7cea4839                            and.         r10, r7, r9      
0x00000416: 7a120010                            e_beq        NO_ABORT         
                                                                              #--------------------------------------------#
                                                                              # If abort detected, clear ICABT bit and     #
                                                                              # re-run invalidation                        #
                                                                              #--------------------------------------------#
0x0000041a: 7d6a4839                            and.         r10, r11, r9     
0x0000041e: 7d53fba6                            mtspr        l1csr1, r10      
0x00000422: 79ffffc8                            e_b          cfg_ICACHE       
                             NO_ABORT                                         
                                                                              #--------------------------------------------#
                                                                              # Check that invalidation has completed -    #
                                                                              # (ICINV=0). Branch if invalidation not      #
                                                                              # complete.                                  #
                                                                              #--------------------------------------------#
0x00000426: 7d0a4839                            and.         r10, r8, r9      
0x0000042a: 7a02ffe4                            e_bne        CHECK_ICINV      
                                                                              #--------------------------------------------#
                                                                              # Enable cache the ICache by performing a    #
                                                                              # read/modify/write of the ICE bit in the    #
                                                                              # L1CSR1 register                            #
                                                                              #--------------------------------------------#
0x0000042e: 7cb3faa6                            mfspr        r5, l1csr1       
0x00000432: 70a0c000                            e_or2i       r5,  0x0000      
0x00000436: 70a0c001                            e_or2i       r5,  0x0001      # Store L1CSR1 value to R5 (ICE=1)
0x0000043a: 0001                                se_isync                      
0x0000043c: 7c0004ac                            msync                         
0x00000440: 7cb3fba6                            mtspr        l1csr1, r5       # Write R5 to L1CSR1 register

                                                                              #--------------------------------------------#
                                                                              # Flush BTB - Set BBFI bit in BUCSR          #
                                                                              #--------------------------------------------#
0x00000444: 7060e000                            e_lis        r3, 0x0          
0x00000448: 7060c200                            e_or2i       r3,  0x0200      
0x0000044c: 7c75fba6                            mtspr        1013, r3         
                                                                              #--------------------------------------------#
                                                                              # Enable BTB - Set BPEN bit in BUCSR         #
                                                                              #--------------------------------------------#
0x00000450: 7060e000                            e_lis        r3, 0x0          
0x00000454: 7060c001                            e_or2i       r3,  0x0001      
0x00000458: 7c75fba6                            mtspr        1013, r3         
                                                                              #--------------------------------------------#
                                                                              # Configure FLASH Slave - XBAR_MPR0/SGPCR0   #
                                                                              #--------------------------------------------#
                                                                              #       Master         |   Priority          #
                                                                              #   M0 CPU Instruction :      1              #
                                                                              #   M1 CPU Data/Nexus  :      0              #
                                                                              #   M2 eDMA            :      2              #
                                                                              #   M3 GFX2D/GXG       :      5              #
                                                                              #   M4 VIU             :      6              #
                                                                              #   M5 DCULite         :      4              #
                                                                              #   M6 DCU             :      3              #
                                                                              #   M7 (Reserved)      :      7              #
                                                                              #--------------------------------------------#
                                                                              # Park CPU Instruction (M0) on Flash         #
                                                                              #--------------------------------------------#
                                                                              # r3 - XBAR_Base Address                     #
                                                                              # r4 - XBAR_MPR0 Value                       #
                                                                              # r5 - XBAR_SGPCR0 Value                     #
                                                                              #--------------------------------------------#
0x0000045c: 707fe7f0                            e_lis        r3, 0xFFF0       
0x00000460: 7068c000                            e_or2i       r3,  0x4000      
0x00000464: 708ee346                            e_lis        r4, 0x7346       
0x00000468: 708ac201                            e_or2i       r4,  0x5201      
0x0000046c: 54830000                            e_stw        r4, 0x0(r3)      # Write to MPR0
0x00000470: 70a0e000                            e_lis        r5, 0000         
0x00000474: 70a0c000                            e_or2i       r5,  0x0000      
0x00000478: 54a30010                            e_stw        r5, 0x10(r3)     # Write to SGPCR0
                                                                              #--------------------------------------------#
                                                                              # Configure SRAM Slave - XBAR_MPR2/SGPCR2    #
                                                                              #--------------------------------------------#
                                                                              #       Master         |   Priority          #
                                                                              #   M0 CPU Instruction :      1              #
                                                                              #   M1 CPU Data/Nexus  :      0              #
                                                                              #   M2 eDMA            :      2              #
                                                                              #   M3 GFX2D/GXG       :      6              #
                                                                              #   M4 VIU             :      5              #
                                                                              #   M5 DCULite         :      4              #
                                                                              #   M6 DCU             :      3              #
                                                                              #   M7 (Reserved)      :      7              #
                                                                              #--------------------------------------------#
                                                                              # Park CPU Data (M1) on RAM                  #
                                                                              #--------------------------------------------#
                                                                              # r4 - XBAR_MPR1 Value                       #
                                                                              # r5 - XBAR_SGPCR1 Value                     #
                                                                              #--------------------------------------------#
0x0000047c: 708ee345                            e_lis        r4, 0x7345       
0x00000480: 708cc201                            e_or2i       r4,  0x6201      
0x00000484: 54830200                            e_stw        r4, 0x200(r3)    # Write to MPR2
0x00000488: 70a0e000                            e_lis        r5, 0x0000       
0x0000048c: 70a0c001                            e_or2i       r5,  0x0001      
0x00000490: 54a30210                            e_stw        r5, 0x210(r3)    # Write to SGPCR2
0x00000494: 78000001                            e_bl         romcopy          
                             ##---------------------------------------------------------------------------    

